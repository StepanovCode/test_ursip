import contextlib
import psycopg2
from datetime import datetime
from psycopg2.extras import execute_batch
from app.server.db_config import dsn


class FormularsTable:
    def __init__(self):
        self.dsn = dsn

    def create_formulars_table(self):
        with contextlib.closing(psycopg2.connect(**self.dsn)) as conn, conn.cursor() as cur:
            query = 'CREATE TABLE IF NOT EXISTS public.formulars (' \
                    'id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,' \
                    'form_name text NOT NULL' \
                    ');'
            cur.execute(query)
            conn.commit()

    def insert_into_formulars_table(self):
        raise NotImplementedError("В дочернем классе не переопределен метод insert_into_formulars_table")


class Formulars(FormularsTable):
    def __init__(self, form_name: str):
        super().__init__()
        self.form_name = form_name

    def insert_into_formulars_table(self):
        with contextlib.closing(psycopg2.connect(**self.dsn)) as conn, conn.cursor() as cur:
            try:
                cur.execute('INSERT INTO public.formulars (id, form_name) VALUES (DEFAULT, %s);', (self.form_name,))
                conn.commit()
                return True

            except (Exception, psycopg2.DatabaseError) as error:
                print("Error: %s" % error)
                conn.rollback()
                cur.close()
                return False

    def select_from_formulars_table(self):
        with contextlib.closing(psycopg2.connect(**self.dsn)) as conn, conn.cursor() as cur:
            try:
                cur.execute('SELECT id FROM public.formulars WHERE form_name=%s;', (self.form_name,))
                return cur.fetchone()[0]

            except (Exception, psycopg2.DatabaseError) as error:
                print("Error: %s" % error)
                conn.rollback()
                cur.close()
                return None


class Form:
    def __init__(self):
        self.dsn = dsn

    def create_table(self):
        raise NotImplementedError("В дочернем классе не переопределен метод create_table")

    def insert_table(self):
        raise NotImplementedError("В дочернем классе не переопределен метод insert_table")


class FormQ(Form):
    def __init__(self, df):
        super().__init__()
        self.df = df
        self.data = []

    def create_table(self):
        with contextlib.closing(psycopg2.connect(**self.dsn)) as conn, conn.cursor() as cur:
            query = 'CREATE TABLE IF NOT EXISTS public.form_q (' \
                    'id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,' \
                    'form_id int references public.formulars(id) NOT NULL,' \
                    'company text NOT NULL,' \
                    'fact_qliq_data1 int NOT NULL,' \
                    'fact_qliq_data2 int NOT NULL,' \
                    'fact_qoil_data1 int NOT NULL,' \
                    'fact_qoil_data2 int NOT NULL,' \
                    'forecast_qliq_data1 int NOT NULL,' \
                    'forecast_qliq_data2 int NOT NULL,' \
                    'forecast_qoil_data1 int NOT NULL,' \
                    'forecast_qoil_data2 int NOT NULL' \
                    ');'
            try:
                cur.execute(query)
                conn.commit()
            except (Exception, psycopg2.DatabaseError) as error:
                print("Error: %s" % error)
                conn.rollback()
                cur.close()
                return 1

    def insert_data(self):
        with contextlib.closing(psycopg2.connect(**self.dsn)) as conn, conn.cursor() as cur:
            query = 'INSERT INTO public.form_q  (' \
                    'id,' \
                    'form_id,' \
                    'company,' \
                    'fact_qliq_data1,' \
                    'fact_qliq_data2,' \
                    'fact_qoil_data1,' \
                    'fact_qoil_data2,' \
                    'forecast_qliq_data1,' \
                    'forecast_qliq_data2,' \
                    'forecast_qoil_data1,' \
                    'forecast_qoil_data2' \
                    ') VALUES (DEFAULT, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)'

            self.data = [tuple(x) for x in self.df.to_numpy()]
            self.data.pop(0)
            print(self.data)
            try:
                execute_batch(cur, query, self.data)
                conn.commit()
            except (Exception, psycopg2.DatabaseError) as error:
                print("Error: %s" % error)
                conn.rollback()
                cur.close()
                return 1
            print("execute_values() done")
            cur.close()
